<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="addressbook-level3">
    <property environment="env"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.8"/>
    <property name="source" value="1.8"/>

	<target name="checkstyle"
			description="Generates a report of code convention violations."
		depends="init-checkstyle">
	  <!-- See http://checkstyle.sourceforge.net/anttask.html for full options of using checkstyle with ant-->
	  <checkstyle config="./lib/google_checks.xml"
				  failureProperty="checkstyle.failure"
				  failOnViolation="true">
		<formatter type="xml" tofile="checkstyle_report.xml"/>
		<fileset dir="src" includes="**/*.java"/>
	  </checkstyle>
	</target>

	<target name="init-checkstyle">
		<path id="checkstyle.lib.path">
				<fileset dir="lib" includes="*.jar"/>
		</path>
		<!-- Sevntu custom checks are retrieved by Ivy into lib folder and will be accessible to checkstyle-->
		<taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpathref="checkstyle.lib.path"/>
	</target>
	
    <path id="checkstyletask">
        <pathelement location="lib/checkstyle-7.1.1-all.jar"/>
		<pathelement location="lib/checkstyle-addons-3.0.0-all.jar"/>
    </path>
	
    <path id="JUnit 4.libraryclasspath">
        <pathelement location="lib/junit.jar"/>
        <pathelement location="lib/hamcrest-core_1.3.jar"/>
    </path>
    <path id="addressbook-level3.classpath">
        <pathelement location="bin"/>
        <path refid="JUnit 4.libraryclasspath"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="test/java">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <src path="test/java"/>
            <classpath refid="addressbook-level3.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target name="LogicTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="seedu.addressbook.logic.LogicTest" todir="${junit.output.dir}"/>
            <classpath refid="addressbook-level3.classpath"/>
        </junit>
    </target>
    <target name="Main (1)">
        <java classname="seedu.addressbook.Main" failonerror="true" fork="yes">
            <classpath refid="addressbook-level3.classpath"/>
        </java>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
    <target name="test" depends="build,checkstyle">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr" failureproperty="test.failed">
            <formatter type="xml"/>
            <batchtest todir="${junit.output.dir}">
                <fileset dir="test/java">
                    <include name="**/*Test*" />
                </fileset>
            </batchtest>
            <jvmarg line="-ea"/>
            <classpath refid="addressbook-level3.classpath"/>
        </junit>
        <fail message="Test failure detected, check test results." if="test.failed" />
    </target>
</project>
